# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2


class GreeterStub(object):
    """The chat service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUsers = channel.unary_unary(
                '/chat.Greeter/GetUsers',
                request_serializer=chat__pb2.UsersList.SerializeToString,
                response_deserializer=chat__pb2.ReceiptStatus.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/chat.Greeter/SendMessage',
                request_serializer=chat__pb2.User.SerializeToString,
                response_deserializer=chat__pb2.ChatMessage.FromString,
                )
        self.ListMessages = channel.stream_unary(
                '/chat.Greeter/ListMessages',
                request_serializer=chat__pb2.ChatMessage.SerializeToString,
                response_deserializer=chat__pb2.ReceiptStatus.FromString,
                )


class GreeterServicer(object):
    """The chat service definition.
    """

    def GetUsers(self, request, context):
        """Server gets a list of users and sends receipt status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Server gets user login and send them message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMessages(self, request_iterator, context):
        """Server gets messages in queue and subscribe to new ones
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUsers,
                    request_deserializer=chat__pb2.UsersList.FromString,
                    response_serializer=chat__pb2.ReceiptStatus.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=chat__pb2.User.FromString,
                    response_serializer=chat__pb2.ChatMessage.SerializeToString,
            ),
            'ListMessages': grpc.stream_unary_rpc_method_handler(
                    servicer.ListMessages,
                    request_deserializer=chat__pb2.ChatMessage.FromString,
                    response_serializer=chat__pb2.ReceiptStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """The chat service definition.
    """

    @staticmethod
    def GetUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Greeter/GetUsers',
            chat__pb2.UsersList.SerializeToString,
            chat__pb2.ReceiptStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Greeter/SendMessage',
            chat__pb2.User.SerializeToString,
            chat__pb2.ChatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListMessages(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/chat.Greeter/ListMessages',
            chat__pb2.ChatMessage.SerializeToString,
            chat__pb2.ReceiptStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
